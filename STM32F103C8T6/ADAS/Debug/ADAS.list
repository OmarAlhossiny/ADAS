
ADAS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004ec  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800061c  0800061c  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800061c  0800061c  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  0800061c  0800061c  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800061c  0800061c  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800061c  0800061c  0001061c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000620  08000620  00010620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08000624  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000024  08000648  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000050  08000648  00020050  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000691  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003bb  00000000  00000000  00020721  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c0  00000000  00000000  00020ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000007d  00000000  00000000  00020ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000acb  00000000  00000000  00020c1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001557  00000000  00000000  000216e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000c230  00000000  00000000  00022c3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000001bc  00000000  00000000  0002ee70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  0002f02c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000024 	.word	0x20000024
 800014c:	00000000 	.word	0x00000000
 8000150:	08000604 	.word	0x08000604

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000028 	.word	0x20000028
 800016c:	08000604 	.word	0x08000604

08000170 <SysTick_Init>:
 * /param[in] SysTick_Ticks number of Ticks Timer will do before reach zero
 *  return    1 in case of unsuccessful initialization
 *            0 in case of successful initialization
 */
uint_8 SysTick_Init(uint_32 SysTick_Ticks)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	uint_8 RET = 0;
 8000178:	2300      	movs	r3, #0
 800017a:	73fb      	strb	r3, [r7, #15]
	if(SysTick_Ticks > SYSTICK_RVR_MASK)
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000182:	d302      	bcc.n	800018a <SysTick_Init+0x1a>
	{
		RET = 1;
 8000184:	2301      	movs	r3, #1
 8000186:	73fb      	strb	r3, [r7, #15]
 8000188:	e017      	b.n	80001ba <SysTick_Init+0x4a>
	}
	else
	{
		SYSTICK_CSR_DISABLE();
 800018a:	4b0f      	ldr	r3, [pc, #60]	; (80001c8 <SysTick_Init+0x58>)
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	4a0e      	ldr	r2, [pc, #56]	; (80001c8 <SysTick_Init+0x58>)
 8000190:	f023 0301 	bic.w	r3, r3, #1
 8000194:	6013      	str	r3, [r2, #0]
		SYSTICK->RVR = SysTick_Ticks;
 8000196:	4a0c      	ldr	r2, [pc, #48]	; (80001c8 <SysTick_Init+0x58>)
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	6053      	str	r3, [r2, #4]
		SYSTICK->CVR = 0;
 800019c:	4b0a      	ldr	r3, [pc, #40]	; (80001c8 <SysTick_Init+0x58>)
 800019e:	2200      	movs	r2, #0
 80001a0:	609a      	str	r2, [r3, #8]
#if SYSTICK_CLOCK_SOURCE == SYSTICK_CLOCK_SOURCE_AHPDIV8
		SYSTICK_CSR_CLOCK_SOURCE_AHB_DIV8();
 80001a2:	4b09      	ldr	r3, [pc, #36]	; (80001c8 <SysTick_Init+0x58>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	4a08      	ldr	r2, [pc, #32]	; (80001c8 <SysTick_Init+0x58>)
 80001a8:	f023 0304 	bic.w	r3, r3, #4
 80001ac:	6013      	str	r3, [r2, #0]
#elif SYSTICK_CLOCK_SOURCE == SYSTICK_CLOCK_SOURCE_AHPDIV1
		SYSTICK_CSR_CLOCK_SOURCE_AHB_DIV1();
#else
#error "Invalid Cock Source"
#endif
		SYSTICK_CSR_EXCEPTION_DISABLE();
 80001ae:	4b06      	ldr	r3, [pc, #24]	; (80001c8 <SysTick_Init+0x58>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	4a05      	ldr	r2, [pc, #20]	; (80001c8 <SysTick_Init+0x58>)
 80001b4:	f023 0302 	bic.w	r3, r3, #2
 80001b8:	6013      	str	r3, [r2, #0]
	}
	return RET;
 80001ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80001bc:	4618      	mov	r0, r3
 80001be:	3714      	adds	r7, #20
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bc80      	pop	{r7}
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	e000e010 	.word	0xe000e010

080001cc <SysTick_DeInit>:
/**
 * /brief     SysTIck Timer DeInitialize
 * /Details   DeInitialize SysTick Timer
 */
void SysTick_DeInit(void)
{
 80001cc:	b480      	push	{r7}
 80001ce:	af00      	add	r7, sp, #0
	SYSTICK_CSR_DISABLE();
 80001d0:	4b0a      	ldr	r3, [pc, #40]	; (80001fc <SysTick_DeInit+0x30>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	4a09      	ldr	r2, [pc, #36]	; (80001fc <SysTick_DeInit+0x30>)
 80001d6:	f023 0301 	bic.w	r3, r3, #1
 80001da:	6013      	str	r3, [r2, #0]
	SYSTICK->RVR = 0;
 80001dc:	4b07      	ldr	r3, [pc, #28]	; (80001fc <SysTick_DeInit+0x30>)
 80001de:	2200      	movs	r2, #0
 80001e0:	605a      	str	r2, [r3, #4]
	SYSTICK->CVR = 0;
 80001e2:	4b06      	ldr	r3, [pc, #24]	; (80001fc <SysTick_DeInit+0x30>)
 80001e4:	2200      	movs	r2, #0
 80001e6:	609a      	str	r2, [r3, #8]
	SYSTICK_CSR_EXCEPTION_DISABLE();
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <SysTick_DeInit+0x30>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a03      	ldr	r2, [pc, #12]	; (80001fc <SysTick_DeInit+0x30>)
 80001ee:	f023 0302 	bic.w	r3, r3, #2
 80001f2:	6013      	str	r3, [r2, #0]
}
 80001f4:	bf00      	nop
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bc80      	pop	{r7}
 80001fa:	4770      	bx	lr
 80001fc:	e000e010 	.word	0xe000e010

08000200 <SysTick_PeriodicInterval>:
 * /Details   generate interrupt periodically after certain amount of time passed
 * /param[in] SysTick_Ticks number of Ticks Timer will do before reach zero
 * /param[in] CallBack pointer to function that will be called after the interval of time end
 */
void SysTick_PeriodicInterval(uint_32 SysTick_Ticks,PtrToFunction CallBack)
{
 8000200:	b480      	push	{r7}
 8000202:	b083      	sub	sp, #12
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
 8000208:	6039      	str	r1, [r7, #0]
	if(NULL != CallBack)
 800020a:	683b      	ldr	r3, [r7, #0]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d01d      	beq.n	800024c <SysTick_PeriodicInterval+0x4c>
	{
		SYSTICK_CSR_DISABLE();
 8000210:	4b11      	ldr	r3, [pc, #68]	; (8000258 <SysTick_PeriodicInterval+0x58>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a10      	ldr	r2, [pc, #64]	; (8000258 <SysTick_PeriodicInterval+0x58>)
 8000216:	f023 0301 	bic.w	r3, r3, #1
 800021a:	6013      	str	r3, [r2, #0]
		SYSTICK->RVR = SysTick_Ticks;
 800021c:	4a0e      	ldr	r2, [pc, #56]	; (8000258 <SysTick_PeriodicInterval+0x58>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	6053      	str	r3, [r2, #4]
		SYSTICK->CVR = 0;
 8000222:	4b0d      	ldr	r3, [pc, #52]	; (8000258 <SysTick_PeriodicInterval+0x58>)
 8000224:	2200      	movs	r2, #0
 8000226:	609a      	str	r2, [r3, #8]
		SYSTICK_CSR_EXCEPTION_ENABLE();
 8000228:	4b0b      	ldr	r3, [pc, #44]	; (8000258 <SysTick_PeriodicInterval+0x58>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	f043 0202 	orr.w	r2, r3, #2
 8000230:	4b09      	ldr	r3, [pc, #36]	; (8000258 <SysTick_PeriodicInterval+0x58>)
 8000232:	601a      	str	r2, [r3, #0]
		CALLback = CallBack;
 8000234:	4a09      	ldr	r2, [pc, #36]	; (800025c <SysTick_PeriodicInterval+0x5c>)
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	6013      	str	r3, [r2, #0]
		Periodic = SYSTICK_PeriodicInterval;
 800023a:	4b09      	ldr	r3, [pc, #36]	; (8000260 <SysTick_PeriodicInterval+0x60>)
 800023c:	2200      	movs	r2, #0
 800023e:	701a      	strb	r2, [r3, #0]
		SYSTICK_CSR_ENABLE();
 8000240:	4b05      	ldr	r3, [pc, #20]	; (8000258 <SysTick_PeriodicInterval+0x58>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	f043 0201 	orr.w	r2, r3, #1
 8000248:	4b03      	ldr	r3, [pc, #12]	; (8000258 <SysTick_PeriodicInterval+0x58>)
 800024a:	601a      	str	r2, [r3, #0]
	}
	else {/* No Thing */}
}
 800024c:	bf00      	nop
 800024e:	370c      	adds	r7, #12
 8000250:	46bd      	mov	sp, r7
 8000252:	bc80      	pop	{r7}
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	e000e010 	.word	0xe000e010
 800025c:	20000040 	.word	0x20000040
 8000260:	20000044 	.word	0x20000044

08000264 <SysTick_GetRemainingTicks>:
 * /brief     SysTIck Timer get remaining ticks
 * /Details   Get the remaining ticks till counter reach Zero
 * /return    number of Ticks to reach Zero
 */
uint_32 SysTick_GetRemainingTicks(void)
{
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
	return SYSTICK->CVR;
 8000268:	4b02      	ldr	r3, [pc, #8]	; (8000274 <SysTick_GetRemainingTicks+0x10>)
 800026a:	689b      	ldr	r3, [r3, #8]
}
 800026c:	4618      	mov	r0, r3
 800026e:	46bd      	mov	sp, r7
 8000270:	bc80      	pop	{r7}
 8000272:	4770      	bx	lr
 8000274:	e000e010 	.word	0xe000e010

08000278 <SysTick_Handler>:


void SysTick_Handler(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	if(Periodic == SYSTICK_SingleInterval){
 800027c:	4b07      	ldr	r3, [pc, #28]	; (800029c <SysTick_Handler+0x24>)
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	b2db      	uxtb	r3, r3
 8000282:	2b01      	cmp	r3, #1
 8000284:	d101      	bne.n	800028a <SysTick_Handler+0x12>
		SysTick_DeInit();
 8000286:	f7ff ffa1 	bl	80001cc <SysTick_DeInit>
	}
	if(CALLback){
 800028a:	4b05      	ldr	r3, [pc, #20]	; (80002a0 <SysTick_Handler+0x28>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	2b00      	cmp	r3, #0
 8000290:	d002      	beq.n	8000298 <SysTick_Handler+0x20>
		CALLback();
 8000292:	4b03      	ldr	r3, [pc, #12]	; (80002a0 <SysTick_Handler+0x28>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	4798      	blx	r3
	}

}
 8000298:	bf00      	nop
 800029a:	bd80      	pop	{r7, pc}
 800029c:	20000044 	.word	0x20000044
 80002a0:	20000040 	.word	0x20000040

080002a4 <RCC_SysClock_Init>:
 * /param[in] config pointer to system clock configuration
 * /return    HAL_OK       ->   System clock successfully Initialized
 *            HAL_NOT_OK   ->   System clock Initialization failed
 */
Std_Return_t RCC_SysClock_Init(RCC_CFGR* config)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b085      	sub	sp, #20
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
	Std_Return_t RET = HAL_OK;
 80002ac:	2300      	movs	r3, #0
 80002ae:	73fb      	strb	r3, [r7, #15]
	if(NULL == config)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d102      	bne.n	80002bc <RCC_SysClock_Init+0x18>
	{
		RET = HAL_NOT_OK;
 80002b6:	2301      	movs	r3, #1
 80002b8:	73fb      	strb	r3, [r7, #15]
 80002ba:	e115      	b.n	80004e8 <RCC_SysClock_Init+0x244>
	}
	else
	{
		MODIFY_REG(RCC->CFGR,RCC_ADC_PRESCALER_MASK,config->ADCPRE);
 80002bc:	4b8d      	ldr	r3, [pc, #564]	; (80004f4 <RCC_SysClock_Init+0x250>)
 80002be:	685b      	ldr	r3, [r3, #4]
 80002c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80002c4:	687a      	ldr	r2, [r7, #4]
 80002c6:	6912      	ldr	r2, [r2, #16]
 80002c8:	431a      	orrs	r2, r3
 80002ca:	4b8a      	ldr	r3, [pc, #552]	; (80004f4 <RCC_SysClock_Init+0x250>)
 80002cc:	605a      	str	r2, [r3, #4]
		MODIFY_REG(RCC->CFGR,RCC_AHB_PRESCALER_MASK,config->HPRE);
 80002ce:	4b89      	ldr	r3, [pc, #548]	; (80004f4 <RCC_SysClock_Init+0x250>)
 80002d0:	685b      	ldr	r3, [r3, #4]
 80002d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80002d6:	687a      	ldr	r2, [r7, #4]
 80002d8:	6852      	ldr	r2, [r2, #4]
 80002da:	431a      	orrs	r2, r3
 80002dc:	4b85      	ldr	r3, [pc, #532]	; (80004f4 <RCC_SysClock_Init+0x250>)
 80002de:	605a      	str	r2, [r3, #4]
		MODIFY_REG(RCC->CFGR,RCC_MICROCONTROLLER_CLOCK_OUT_MASK,config->MCO);
 80002e0:	4b84      	ldr	r3, [pc, #528]	; (80004f4 <RCC_SysClock_Init+0x250>)
 80002e2:	685b      	ldr	r3, [r3, #4]
 80002e4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80002e8:	687a      	ldr	r2, [r7, #4]
 80002ea:	6a12      	ldr	r2, [r2, #32]
 80002ec:	431a      	orrs	r2, r3
 80002ee:	4b81      	ldr	r3, [pc, #516]	; (80004f4 <RCC_SysClock_Init+0x250>)
 80002f0:	605a      	str	r2, [r3, #4]
		MODIFY_REG(RCC->CFGR,RCC_PLL_MUL_MASK,config->PLLMUL);
 80002f2:	4b80      	ldr	r3, [pc, #512]	; (80004f4 <RCC_SysClock_Init+0x250>)
 80002f4:	685b      	ldr	r3, [r3, #4]
 80002f6:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 80002fa:	687a      	ldr	r2, [r7, #4]
 80002fc:	69d2      	ldr	r2, [r2, #28]
 80002fe:	431a      	orrs	r2, r3
 8000300:	4b7c      	ldr	r3, [pc, #496]	; (80004f4 <RCC_SysClock_Init+0x250>)
 8000302:	605a      	str	r2, [r3, #4]
		MODIFY_REG(RCC->CFGR,RCC_APB_LOW_SPEED_PRESCALER_APB1_MASK,config->PPRE1);
 8000304:	4b7b      	ldr	r3, [pc, #492]	; (80004f4 <RCC_SysClock_Init+0x250>)
 8000306:	685b      	ldr	r3, [r3, #4]
 8000308:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800030c:	687a      	ldr	r2, [r7, #4]
 800030e:	6892      	ldr	r2, [r2, #8]
 8000310:	431a      	orrs	r2, r3
 8000312:	4b78      	ldr	r3, [pc, #480]	; (80004f4 <RCC_SysClock_Init+0x250>)
 8000314:	605a      	str	r2, [r3, #4]
		MODIFY_REG(RCC->CFGR,RCC_APB_HIGH_SPEED_PRESCALER_APB2_MASK,config->PPRE2);
 8000316:	4b77      	ldr	r3, [pc, #476]	; (80004f4 <RCC_SysClock_Init+0x250>)
 8000318:	685b      	ldr	r3, [r3, #4]
 800031a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800031e:	687a      	ldr	r2, [r7, #4]
 8000320:	68d2      	ldr	r2, [r2, #12]
 8000322:	431a      	orrs	r2, r3
 8000324:	4b73      	ldr	r3, [pc, #460]	; (80004f4 <RCC_SysClock_Init+0x250>)
 8000326:	605a      	str	r2, [r3, #4]

		if(config->SW == RCC_SYSTEM_CLOCK_SWITCH_HSI)
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d110      	bne.n	8000352 <RCC_SysClock_Init+0xae>
		{
			Clock_Val = 8;
 8000330:	4b71      	ldr	r3, [pc, #452]	; (80004f8 <RCC_SysClock_Init+0x254>)
 8000332:	2208      	movs	r2, #8
 8000334:	701a      	strb	r2, [r3, #0]
			RCC_HSI_CLOCK_ENABLE();
 8000336:	4b6f      	ldr	r3, [pc, #444]	; (80004f4 <RCC_SysClock_Init+0x250>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	f043 0201 	orr.w	r2, r3, #1
 800033e:	4b6d      	ldr	r3, [pc, #436]	; (80004f4 <RCC_SysClock_Init+0x250>)
 8000340:	601a      	str	r2, [r3, #0]
			while(RCC_HSI_READ_READY_FLAG() == RCC_HSI_READY_FLAG_CLEAR);
 8000342:	bf00      	nop
 8000344:	4b6b      	ldr	r3, [pc, #428]	; (80004f4 <RCC_SysClock_Init+0x250>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	f003 0302 	and.w	r3, r3, #2
 800034c:	2b00      	cmp	r3, #0
 800034e:	d0f9      	beq.n	8000344 <RCC_SysClock_Init+0xa0>
 8000350:	e088      	b.n	8000464 <RCC_SysClock_Init+0x1c0>
		}
		else if(config->SW == RCC_SYSTEM_CLOCK_SWITCH_HSE)
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	2b01      	cmp	r3, #1
 8000358:	d110      	bne.n	800037c <RCC_SysClock_Init+0xd8>
		{
			Clock_Val = 8;
 800035a:	4b67      	ldr	r3, [pc, #412]	; (80004f8 <RCC_SysClock_Init+0x254>)
 800035c:	2208      	movs	r2, #8
 800035e:	701a      	strb	r2, [r3, #0]
			RCC_HSE_CLOCK_ENABLE();
 8000360:	4b64      	ldr	r3, [pc, #400]	; (80004f4 <RCC_SysClock_Init+0x250>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000368:	4b62      	ldr	r3, [pc, #392]	; (80004f4 <RCC_SysClock_Init+0x250>)
 800036a:	601a      	str	r2, [r3, #0]
			while(RCC_HSE_READ_READY_FLAG() == RCC_HSE_READY_FLAG_CLEAR);
 800036c:	bf00      	nop
 800036e:	4b61      	ldr	r3, [pc, #388]	; (80004f4 <RCC_SysClock_Init+0x250>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000376:	2b00      	cmp	r3, #0
 8000378:	d0f9      	beq.n	800036e <RCC_SysClock_Init+0xca>
 800037a:	e073      	b.n	8000464 <RCC_SysClock_Init+0x1c0>
		}
		else if(config->SW == RCC_SYSTEM_CLOCK_SWITCH_PLL)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	2b02      	cmp	r3, #2
 8000382:	d16d      	bne.n	8000460 <RCC_SysClock_Init+0x1bc>
		{
			if(config->PLLSRC == RCC_PLL_SOURCE_HSI)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	695b      	ldr	r3, [r3, #20]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d116      	bne.n	80003ba <RCC_SysClock_Init+0x116>
			{
				Clock_Val = 4;
 800038c:	4b5a      	ldr	r3, [pc, #360]	; (80004f8 <RCC_SysClock_Init+0x254>)
 800038e:	2204      	movs	r2, #4
 8000390:	701a      	strb	r2, [r3, #0]
				RCC_HSI_CLOCK_ENABLE();
 8000392:	4b58      	ldr	r3, [pc, #352]	; (80004f4 <RCC_SysClock_Init+0x250>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	f043 0201 	orr.w	r2, r3, #1
 800039a:	4b56      	ldr	r3, [pc, #344]	; (80004f4 <RCC_SysClock_Init+0x250>)
 800039c:	601a      	str	r2, [r3, #0]
				while(RCC_HSI_READ_READY_FLAG() == RCC_HSI_READY_FLAG_CLEAR);
 800039e:	bf00      	nop
 80003a0:	4b54      	ldr	r3, [pc, #336]	; (80004f4 <RCC_SysClock_Init+0x250>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f003 0302 	and.w	r3, r3, #2
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d0f9      	beq.n	80003a0 <RCC_SysClock_Init+0xfc>
				RCC_PLL_ENTRY_SOURCE_HSI();
 80003ac:	4b51      	ldr	r3, [pc, #324]	; (80004f4 <RCC_SysClock_Init+0x250>)
 80003ae:	685b      	ldr	r3, [r3, #4]
 80003b0:	4a50      	ldr	r2, [pc, #320]	; (80004f4 <RCC_SysClock_Init+0x250>)
 80003b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003b6:	6053      	str	r3, [r2, #4]
 80003b8:	e037      	b.n	800042a <RCC_SysClock_Init+0x186>
			}
			else if(config->PLLSRC == RCC_PLL_SOURCE_HSE)
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	695b      	ldr	r3, [r3, #20]
 80003be:	2b01      	cmp	r3, #1
 80003c0:	d131      	bne.n	8000426 <RCC_SysClock_Init+0x182>
			{
				if(config->PLLXTPRE == RCC_HSE_NOT_DIVIDED)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	699b      	ldr	r3, [r3, #24]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d109      	bne.n	80003de <RCC_SysClock_Init+0x13a>
				{
					Clock_Val = 8;
 80003ca:	4b4b      	ldr	r3, [pc, #300]	; (80004f8 <RCC_SysClock_Init+0x254>)
 80003cc:	2208      	movs	r2, #8
 80003ce:	701a      	strb	r2, [r3, #0]
					RCC_HSE_CLOCK_NOT_DIVIDED();
 80003d0:	4b48      	ldr	r3, [pc, #288]	; (80004f4 <RCC_SysClock_Init+0x250>)
 80003d2:	685b      	ldr	r3, [r3, #4]
 80003d4:	4a47      	ldr	r2, [pc, #284]	; (80004f4 <RCC_SysClock_Init+0x250>)
 80003d6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80003da:	6053      	str	r3, [r2, #4]
 80003dc:	e00f      	b.n	80003fe <RCC_SysClock_Init+0x15a>
				}
				else if(config->PLLXTPRE == RCC_HSE_DIVIDED_BY2)
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	699b      	ldr	r3, [r3, #24]
 80003e2:	2b01      	cmp	r3, #1
 80003e4:	d109      	bne.n	80003fa <RCC_SysClock_Init+0x156>
				{
					Clock_Val = 4;
 80003e6:	4b44      	ldr	r3, [pc, #272]	; (80004f8 <RCC_SysClock_Init+0x254>)
 80003e8:	2204      	movs	r2, #4
 80003ea:	701a      	strb	r2, [r3, #0]
					RCC_HSE_CLOCK_DIVIDED_BY2();
 80003ec:	4b41      	ldr	r3, [pc, #260]	; (80004f4 <RCC_SysClock_Init+0x250>)
 80003ee:	685b      	ldr	r3, [r3, #4]
 80003f0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80003f4:	4b3f      	ldr	r3, [pc, #252]	; (80004f4 <RCC_SysClock_Init+0x250>)
 80003f6:	605a      	str	r2, [r3, #4]
 80003f8:	e001      	b.n	80003fe <RCC_SysClock_Init+0x15a>
				}
				else
				{
					return HAL_NOT_OK;
 80003fa:	2301      	movs	r3, #1
 80003fc:	e075      	b.n	80004ea <RCC_SysClock_Init+0x246>
				}
				RCC_HSE_CLOCK_ENABLE();
 80003fe:	4b3d      	ldr	r3, [pc, #244]	; (80004f4 <RCC_SysClock_Init+0x250>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000406:	4b3b      	ldr	r3, [pc, #236]	; (80004f4 <RCC_SysClock_Init+0x250>)
 8000408:	601a      	str	r2, [r3, #0]
				while(RCC_HSE_READ_READY_FLAG() == RCC_HSE_READY_FLAG_CLEAR);
 800040a:	bf00      	nop
 800040c:	4b39      	ldr	r3, [pc, #228]	; (80004f4 <RCC_SysClock_Init+0x250>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000414:	2b00      	cmp	r3, #0
 8000416:	d0f9      	beq.n	800040c <RCC_SysClock_Init+0x168>
				RCC_PLL_ENTRY_SOURCE_HSE();
 8000418:	4b36      	ldr	r3, [pc, #216]	; (80004f4 <RCC_SysClock_Init+0x250>)
 800041a:	685b      	ldr	r3, [r3, #4]
 800041c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000420:	4b34      	ldr	r3, [pc, #208]	; (80004f4 <RCC_SysClock_Init+0x250>)
 8000422:	605a      	str	r2, [r3, #4]
 8000424:	e001      	b.n	800042a <RCC_SysClock_Init+0x186>
			}
			else
			{
				return HAL_NOT_OK;
 8000426:	2301      	movs	r3, #1
 8000428:	e05f      	b.n	80004ea <RCC_SysClock_Init+0x246>
			}
			Clock_Val *= ((config->PLLMUL >> RCC_PLL_MUL_POS) + 2);
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	69db      	ldr	r3, [r3, #28]
 800042e:	149b      	asrs	r3, r3, #18
 8000430:	3302      	adds	r3, #2
 8000432:	b2db      	uxtb	r3, r3
 8000434:	4a30      	ldr	r2, [pc, #192]	; (80004f8 <RCC_SysClock_Init+0x254>)
 8000436:	7812      	ldrb	r2, [r2, #0]
 8000438:	b2d2      	uxtb	r2, r2
 800043a:	fb02 f303 	mul.w	r3, r2, r3
 800043e:	b2da      	uxtb	r2, r3
 8000440:	4b2d      	ldr	r3, [pc, #180]	; (80004f8 <RCC_SysClock_Init+0x254>)
 8000442:	701a      	strb	r2, [r3, #0]
			RCC_PLL_CLOCK_ENABLE();
 8000444:	4b2b      	ldr	r3, [pc, #172]	; (80004f4 <RCC_SysClock_Init+0x250>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800044c:	4b29      	ldr	r3, [pc, #164]	; (80004f4 <RCC_SysClock_Init+0x250>)
 800044e:	601a      	str	r2, [r3, #0]
			while(RCC_PLL_READ_READY_FLAG() == RCC_PLL_READY_FLAG_CLEAR);
 8000450:	bf00      	nop
 8000452:	4b28      	ldr	r3, [pc, #160]	; (80004f4 <RCC_SysClock_Init+0x250>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800045a:	2b00      	cmp	r3, #0
 800045c:	d0f9      	beq.n	8000452 <RCC_SysClock_Init+0x1ae>
 800045e:	e001      	b.n	8000464 <RCC_SysClock_Init+0x1c0>
		}
		else
		{
			return HAL_NOT_OK;
 8000460:	2301      	movs	r3, #1
 8000462:	e042      	b.n	80004ea <RCC_SysClock_Init+0x246>
		}
		if(Clock_Val > 0 && Clock_Val <= 24)
 8000464:	4b24      	ldr	r3, [pc, #144]	; (80004f8 <RCC_SysClock_Init+0x254>)
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	b2db      	uxtb	r3, r3
 800046a:	2b00      	cmp	r3, #0
 800046c:	d00b      	beq.n	8000486 <RCC_SysClock_Init+0x1e2>
 800046e:	4b22      	ldr	r3, [pc, #136]	; (80004f8 <RCC_SysClock_Init+0x254>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	b2db      	uxtb	r3, r3
 8000474:	2b18      	cmp	r3, #24
 8000476:	d806      	bhi.n	8000486 <RCC_SysClock_Init+0x1e2>
		{
			MODIFY_REG(*FLASH_ACR,FLASH_ACR_LATENCY_MASK,FLASH_ACR_LATENCY_ZERO_WAIT_STATE);
 8000478:	4b20      	ldr	r3, [pc, #128]	; (80004fc <RCC_SysClock_Init+0x258>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a1f      	ldr	r2, [pc, #124]	; (80004fc <RCC_SysClock_Init+0x258>)
 800047e:	f023 0307 	bic.w	r3, r3, #7
 8000482:	6013      	str	r3, [r2, #0]
 8000484:	e027      	b.n	80004d6 <RCC_SysClock_Init+0x232>
		}
		else if(Clock_Val > 24 && Clock_Val <= 48)
 8000486:	4b1c      	ldr	r3, [pc, #112]	; (80004f8 <RCC_SysClock_Init+0x254>)
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	b2db      	uxtb	r3, r3
 800048c:	2b18      	cmp	r3, #24
 800048e:	d90d      	bls.n	80004ac <RCC_SysClock_Init+0x208>
 8000490:	4b19      	ldr	r3, [pc, #100]	; (80004f8 <RCC_SysClock_Init+0x254>)
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	b2db      	uxtb	r3, r3
 8000496:	2b30      	cmp	r3, #48	; 0x30
 8000498:	d808      	bhi.n	80004ac <RCC_SysClock_Init+0x208>
		{
			MODIFY_REG(*FLASH_ACR,FLASH_ACR_LATENCY_MASK,FLASH_ACR_LATENCY_ONE_WAIT_STATE);
 800049a:	4b18      	ldr	r3, [pc, #96]	; (80004fc <RCC_SysClock_Init+0x258>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	f023 0307 	bic.w	r3, r3, #7
 80004a2:	f043 0201 	orr.w	r2, r3, #1
 80004a6:	4b15      	ldr	r3, [pc, #84]	; (80004fc <RCC_SysClock_Init+0x258>)
 80004a8:	601a      	str	r2, [r3, #0]
 80004aa:	e014      	b.n	80004d6 <RCC_SysClock_Init+0x232>
		}
		else if(Clock_Val > 48 && Clock_Val <= 72)
 80004ac:	4b12      	ldr	r3, [pc, #72]	; (80004f8 <RCC_SysClock_Init+0x254>)
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	2b30      	cmp	r3, #48	; 0x30
 80004b4:	d90d      	bls.n	80004d2 <RCC_SysClock_Init+0x22e>
 80004b6:	4b10      	ldr	r3, [pc, #64]	; (80004f8 <RCC_SysClock_Init+0x254>)
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	2b48      	cmp	r3, #72	; 0x48
 80004be:	d808      	bhi.n	80004d2 <RCC_SysClock_Init+0x22e>
		{
			MODIFY_REG(*FLASH_ACR,FLASH_ACR_LATENCY_MASK,FLASH_ACR_LATENCY_TWO_WAIT_STATE);
 80004c0:	4b0e      	ldr	r3, [pc, #56]	; (80004fc <RCC_SysClock_Init+0x258>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	f023 0307 	bic.w	r3, r3, #7
 80004c8:	f043 0202 	orr.w	r2, r3, #2
 80004cc:	4b0b      	ldr	r3, [pc, #44]	; (80004fc <RCC_SysClock_Init+0x258>)
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	e001      	b.n	80004d6 <RCC_SysClock_Init+0x232>
		}
		else
		{
			return HAL_NOT_OK;
 80004d2:	2301      	movs	r3, #1
 80004d4:	e009      	b.n	80004ea <RCC_SysClock_Init+0x246>
		}
		MODIFY_REG(RCC->CFGR,RCC_SYSTEM_CLOCK_SWITCH_MASK,config->SW);
 80004d6:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <RCC_SysClock_Init+0x250>)
 80004d8:	685b      	ldr	r3, [r3, #4]
 80004da:	f023 0303 	bic.w	r3, r3, #3
 80004de:	687a      	ldr	r2, [r7, #4]
 80004e0:	6812      	ldr	r2, [r2, #0]
 80004e2:	431a      	orrs	r2, r3
 80004e4:	4b03      	ldr	r3, [pc, #12]	; (80004f4 <RCC_SysClock_Init+0x250>)
 80004e6:	605a      	str	r2, [r3, #4]
	}
	return RET;
 80004e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	3714      	adds	r7, #20
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr
 80004f4:	40021000 	.word	0x40021000
 80004f8:	20000045 	.word	0x20000045
 80004fc:	40022000 	.word	0x40022000

08000500 <main>:
	.PLLMUL = RCC_PLL_MULTIPLICATION_FACTOR_9,
	.ADCPRE = RCC_ADC_PRESCALER_DIV8
};

int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
    RET = RCC_SysClock_Init(&config);
 8000504:	480b      	ldr	r0, [pc, #44]	; (8000534 <main+0x34>)
 8000506:	f7ff fecd 	bl	80002a4 <RCC_SysClock_Init>
 800050a:	4603      	mov	r3, r0
 800050c:	461a      	mov	r2, r3
 800050e:	4b0a      	ldr	r3, [pc, #40]	; (8000538 <main+0x38>)
 8000510:	701a      	strb	r2, [r3, #0]
    ret = SysTick_Init(8999999);
 8000512:	480a      	ldr	r0, [pc, #40]	; (800053c <main+0x3c>)
 8000514:	f7ff fe2c 	bl	8000170 <SysTick_Init>
 8000518:	4603      	mov	r3, r0
 800051a:	461a      	mov	r2, r3
 800051c:	4b08      	ldr	r3, [pc, #32]	; (8000540 <main+0x40>)
 800051e:	701a      	strb	r2, [r3, #0]
    SysTick_PeriodicInterval(8999999,Callback);
 8000520:	4908      	ldr	r1, [pc, #32]	; (8000544 <main+0x44>)
 8000522:	4806      	ldr	r0, [pc, #24]	; (800053c <main+0x3c>)
 8000524:	f7ff fe6c 	bl	8000200 <SysTick_PeriodicInterval>

	while(1)
	{
		remaining = SysTick_GetRemainingTicks();
 8000528:	f7ff fe9c 	bl	8000264 <SysTick_GetRemainingTicks>
 800052c:	4603      	mov	r3, r0
 800052e:	4a06      	ldr	r2, [pc, #24]	; (8000548 <main+0x48>)
 8000530:	6013      	str	r3, [r2, #0]
 8000532:	e7f9      	b.n	8000528 <main+0x28>
 8000534:	20000000 	.word	0x20000000
 8000538:	20000046 	.word	0x20000046
 800053c:	0089543f 	.word	0x0089543f
 8000540:	20000047 	.word	0x20000047
 8000544:	0800054d 	.word	0x0800054d
 8000548:	2000004c 	.word	0x2000004c

0800054c <Callback>:
	}
	return 0;
}

void Callback(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
	num++;
 8000550:	4b04      	ldr	r3, [pc, #16]	; (8000564 <Callback+0x18>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	3301      	adds	r3, #1
 8000556:	4a03      	ldr	r2, [pc, #12]	; (8000564 <Callback+0x18>)
 8000558:	6013      	str	r3, [r2, #0]
}
 800055a:	bf00      	nop
 800055c:	46bd      	mov	sp, r7
 800055e:	bc80      	pop	{r7}
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	20000048 	.word	0x20000048

08000568 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000568:	480d      	ldr	r0, [pc, #52]	; (80005a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800056a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800056c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000570:	480c      	ldr	r0, [pc, #48]	; (80005a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000572:	490d      	ldr	r1, [pc, #52]	; (80005a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000574:	4a0d      	ldr	r2, [pc, #52]	; (80005ac <LoopForever+0xe>)
  movs r3, #0
 8000576:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000578:	e002      	b.n	8000580 <LoopCopyDataInit>

0800057a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800057a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800057c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800057e:	3304      	adds	r3, #4

08000580 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000584:	d3f9      	bcc.n	800057a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000586:	4a0a      	ldr	r2, [pc, #40]	; (80005b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000588:	4c0a      	ldr	r4, [pc, #40]	; (80005b4 <LoopForever+0x16>)
  movs r3, #0
 800058a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800058c:	e001      	b.n	8000592 <LoopFillZerobss>

0800058e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800058e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000590:	3204      	adds	r2, #4

08000592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000594:	d3fb      	bcc.n	800058e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000596:	f000 f811 	bl	80005bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800059a:	f7ff ffb1 	bl	8000500 <main>

0800059e <LoopForever>:

LoopForever:
  b LoopForever
 800059e:	e7fe      	b.n	800059e <LoopForever>
  ldr   r0, =_estack
 80005a0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80005a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005a8:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80005ac:	08000624 	.word	0x08000624
  ldr r2, =_sbss
 80005b0:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80005b4:	20000050 	.word	0x20000050

080005b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005b8:	e7fe      	b.n	80005b8 <ADC1_2_IRQHandler>
	...

080005bc <__libc_init_array>:
 80005bc:	b570      	push	{r4, r5, r6, lr}
 80005be:	2600      	movs	r6, #0
 80005c0:	4d0c      	ldr	r5, [pc, #48]	; (80005f4 <__libc_init_array+0x38>)
 80005c2:	4c0d      	ldr	r4, [pc, #52]	; (80005f8 <__libc_init_array+0x3c>)
 80005c4:	1b64      	subs	r4, r4, r5
 80005c6:	10a4      	asrs	r4, r4, #2
 80005c8:	42a6      	cmp	r6, r4
 80005ca:	d109      	bne.n	80005e0 <__libc_init_array+0x24>
 80005cc:	f000 f81a 	bl	8000604 <_init>
 80005d0:	2600      	movs	r6, #0
 80005d2:	4d0a      	ldr	r5, [pc, #40]	; (80005fc <__libc_init_array+0x40>)
 80005d4:	4c0a      	ldr	r4, [pc, #40]	; (8000600 <__libc_init_array+0x44>)
 80005d6:	1b64      	subs	r4, r4, r5
 80005d8:	10a4      	asrs	r4, r4, #2
 80005da:	42a6      	cmp	r6, r4
 80005dc:	d105      	bne.n	80005ea <__libc_init_array+0x2e>
 80005de:	bd70      	pop	{r4, r5, r6, pc}
 80005e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80005e4:	4798      	blx	r3
 80005e6:	3601      	adds	r6, #1
 80005e8:	e7ee      	b.n	80005c8 <__libc_init_array+0xc>
 80005ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80005ee:	4798      	blx	r3
 80005f0:	3601      	adds	r6, #1
 80005f2:	e7f2      	b.n	80005da <__libc_init_array+0x1e>
 80005f4:	0800061c 	.word	0x0800061c
 80005f8:	0800061c 	.word	0x0800061c
 80005fc:	0800061c 	.word	0x0800061c
 8000600:	08000620 	.word	0x08000620

08000604 <_init>:
 8000604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000606:	bf00      	nop
 8000608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800060a:	bc08      	pop	{r3}
 800060c:	469e      	mov	lr, r3
 800060e:	4770      	bx	lr

08000610 <_fini>:
 8000610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000612:	bf00      	nop
 8000614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000616:	bc08      	pop	{r3}
 8000618:	469e      	mov	lr, r3
 800061a:	4770      	bx	lr
