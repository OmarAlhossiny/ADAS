
ADAS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002bc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003ec  080003ec  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003ec  080003ec  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  080003ec  080003ec  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003ec  080003ec  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003ec  080003ec  000103ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003f0  080003f0  000103f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080003f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000024  08000418  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000044  08000418  00020044  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY
 13 .debug_info   000007c3  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002cb  00000000  00000000  00020853  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000088  00000000  00000000  00020b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000059  00000000  00000000  00020ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000354  00000000  00000000  00020c01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000d99  00000000  00000000  00020f55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000071e9  00000000  00000000  00021cee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000012c  00000000  00000000  00028ed8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  00029004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000024 	.word	0x20000024
 800014c:	00000000 	.word	0x00000000
 8000150:	080003d4 	.word	0x080003d4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000028 	.word	0x20000028
 800016c:	080003d4 	.word	0x080003d4

08000170 <GPIO_Pin_Direction_Initialize>:
 * /param[in] config pointer to GPIO pin configuration
 * /return    OK       ->   GPIO pin successfully Initialized
 *            NOT_OK   ->   GPIO pin Initialization failed
 */
Std_Return_t GPIO_Pin_Direction_Initialize(const GPIO_Config* config)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b086      	sub	sp, #24
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	Std_Return_t RET = OK;
 8000178:	2300      	movs	r3, #0
 800017a:	75fb      	strb	r3, [r7, #23]
	uint_32 mode_temp;
	uint_32 mask = 0x0000000FUL;
 800017c:	230f      	movs	r3, #15
 800017e:	613b      	str	r3, [r7, #16]
	uint_32 port_register;
	if(config == NULL)
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	2b00      	cmp	r3, #0
 8000184:	d102      	bne.n	800018c <GPIO_Pin_Direction_Initialize+0x1c>
	{
		RET = NOT_OK;
 8000186:	2301      	movs	r3, #1
 8000188:	75fb      	strb	r3, [r7, #23]
 800018a:	e054      	b.n	8000236 <GPIO_Pin_Direction_Initialize+0xc6>
	}
	else
	{
		port_register = GPIO[config->port]->CR[config->pin / 8];
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	791b      	ldrb	r3, [r3, #4]
 8000190:	461a      	mov	r2, r3
 8000192:	4b2b      	ldr	r3, [pc, #172]	; (8000240 <GPIO_Pin_Direction_Initialize+0xd0>)
 8000194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000198:	687a      	ldr	r2, [r7, #4]
 800019a:	7952      	ldrb	r2, [r2, #5]
 800019c:	08d2      	lsrs	r2, r2, #3
 800019e:	b2d2      	uxtb	r2, r2
 80001a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80001a4:	60fb      	str	r3, [r7, #12]
		mode_temp = config->mode;
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	60bb      	str	r3, [r7, #8]
		mode_temp <<= ((config->pin % 8) * 4);
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	795b      	ldrb	r3, [r3, #5]
 80001b0:	f003 0307 	and.w	r3, r3, #7
 80001b4:	009b      	lsls	r3, r3, #2
 80001b6:	68ba      	ldr	r2, [r7, #8]
 80001b8:	fa02 f303 	lsl.w	r3, r2, r3
 80001bc:	60bb      	str	r3, [r7, #8]
		mask = ~(mask << ((config->pin % 8) * 4));
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	795b      	ldrb	r3, [r3, #5]
 80001c2:	f003 0307 	and.w	r3, r3, #7
 80001c6:	009b      	lsls	r3, r3, #2
 80001c8:	693a      	ldr	r2, [r7, #16]
 80001ca:	fa02 f303 	lsl.w	r3, r2, r3
 80001ce:	43db      	mvns	r3, r3
 80001d0:	613b      	str	r3, [r7, #16]
		port_register &= mask;
 80001d2:	68fa      	ldr	r2, [r7, #12]
 80001d4:	693b      	ldr	r3, [r7, #16]
 80001d6:	4013      	ands	r3, r2
 80001d8:	60fb      	str	r3, [r7, #12]
		port_register |= mode_temp;
 80001da:	68fa      	ldr	r2, [r7, #12]
 80001dc:	68bb      	ldr	r3, [r7, #8]
 80001de:	4313      	orrs	r3, r2
 80001e0:	60fb      	str	r3, [r7, #12]
		GPIO[config->port]->CR[config->pin / 8] = port_register;
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	791b      	ldrb	r3, [r3, #4]
 80001e6:	461a      	mov	r2, r3
 80001e8:	4b15      	ldr	r3, [pc, #84]	; (8000240 <GPIO_Pin_Direction_Initialize+0xd0>)
 80001ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80001ee:	687a      	ldr	r2, [r7, #4]
 80001f0:	7952      	ldrb	r2, [r2, #5]
 80001f2:	08d2      	lsrs	r2, r2, #3
 80001f4:	b2d2      	uxtb	r2, r2
 80001f6:	4611      	mov	r1, r2
 80001f8:	68fa      	ldr	r2, [r7, #12]
 80001fa:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		if(config->mode == GPIO_MODE_INPUT_PULL_UP_DOWN)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	2b08      	cmp	r3, #8
 8000204:	d117      	bne.n	8000236 <GPIO_Pin_Direction_Initialize+0xc6>
		{
			if(config->state == PULL_DOWN)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	79db      	ldrb	r3, [r3, #7]
 800020a:	2b00      	cmp	r3, #0
 800020c:	d106      	bne.n	800021c <GPIO_Pin_Direction_Initialize+0xac>
			{
				RET = GPIO_Pin_Write_logic(config,GPIO_LOW);
 800020e:	2100      	movs	r1, #0
 8000210:	6878      	ldr	r0, [r7, #4]
 8000212:	f000 f817 	bl	8000244 <GPIO_Pin_Write_logic>
 8000216:	4603      	mov	r3, r0
 8000218:	75fb      	strb	r3, [r7, #23]
 800021a:	e00c      	b.n	8000236 <GPIO_Pin_Direction_Initialize+0xc6>
			}
			else if(config->state == PULL_UP)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	79db      	ldrb	r3, [r3, #7]
 8000220:	2b01      	cmp	r3, #1
 8000222:	d106      	bne.n	8000232 <GPIO_Pin_Direction_Initialize+0xc2>
			{
				RET = GPIO_Pin_Write_logic(config,GPIO_HIGH);
 8000224:	2101      	movs	r1, #1
 8000226:	6878      	ldr	r0, [r7, #4]
 8000228:	f000 f80c 	bl	8000244 <GPIO_Pin_Write_logic>
 800022c:	4603      	mov	r3, r0
 800022e:	75fb      	strb	r3, [r7, #23]
 8000230:	e001      	b.n	8000236 <GPIO_Pin_Direction_Initialize+0xc6>
			}
			else
			{
				RET = NOT_OK;
 8000232:	2301      	movs	r3, #1
 8000234:	75fb      	strb	r3, [r7, #23]
			}
		}

	}
	return RET;
 8000236:	7dfb      	ldrb	r3, [r7, #23]
}
 8000238:	4618      	mov	r0, r3
 800023a:	3718      	adds	r7, #24
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}
 8000240:	20000000 	.word	0x20000000

08000244 <GPIO_Pin_Write_logic>:
 * /param[in] logic variable to store the desired logic
 * /return    OK       ->   GPIO pin successfully Initialized
 *            NOT_OK   ->   GPIO pin Initialization failed
 */
Std_Return_t GPIO_Pin_Write_logic(const GPIO_Config* config,PIN_LOGIC logic)
{
 8000244:	b480      	push	{r7}
 8000246:	b085      	sub	sp, #20
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
 800024c:	460b      	mov	r3, r1
 800024e:	70fb      	strb	r3, [r7, #3]
	Std_Return_t RET = OK;
 8000250:	2300      	movs	r3, #0
 8000252:	73fb      	strb	r3, [r7, #15]
	uint_32 logic_temp = 0x00000001UL;
 8000254:	2301      	movs	r3, #1
 8000256:	60bb      	str	r3, [r7, #8]
	if(config == NULL)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	2b00      	cmp	r3, #0
 800025c:	d102      	bne.n	8000264 <GPIO_Pin_Write_logic+0x20>
	{
		RET = NOT_OK;
 800025e:	2301      	movs	r3, #1
 8000260:	73fb      	strb	r3, [r7, #15]
 8000262:	e036      	b.n	80002d2 <GPIO_Pin_Write_logic+0x8e>
	}
	else
	{
		if(logic == GPIO_LOW)
 8000264:	78fb      	ldrb	r3, [r7, #3]
 8000266:	2b00      	cmp	r3, #0
 8000268:	d117      	bne.n	800029a <GPIO_Pin_Write_logic+0x56>
		{
			logic_temp <<= (16 + config->pin);
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	795b      	ldrb	r3, [r3, #5]
 800026e:	3310      	adds	r3, #16
 8000270:	68ba      	ldr	r2, [r7, #8]
 8000272:	fa02 f303 	lsl.w	r3, r2, r3
 8000276:	60bb      	str	r3, [r7, #8]
			GPIO[config->port]->BSRR |= logic_temp;
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	791b      	ldrb	r3, [r3, #4]
 800027c:	461a      	mov	r2, r3
 800027e:	4b18      	ldr	r3, [pc, #96]	; (80002e0 <GPIO_Pin_Write_logic+0x9c>)
 8000280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000284:	6919      	ldr	r1, [r3, #16]
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	791b      	ldrb	r3, [r3, #4]
 800028a:	461a      	mov	r2, r3
 800028c:	4b14      	ldr	r3, [pc, #80]	; (80002e0 <GPIO_Pin_Write_logic+0x9c>)
 800028e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000292:	68ba      	ldr	r2, [r7, #8]
 8000294:	430a      	orrs	r2, r1
 8000296:	611a      	str	r2, [r3, #16]
 8000298:	e01b      	b.n	80002d2 <GPIO_Pin_Write_logic+0x8e>
		}
		else if(logic == GPIO_HIGH)
 800029a:	78fb      	ldrb	r3, [r7, #3]
 800029c:	2b01      	cmp	r3, #1
 800029e:	d116      	bne.n	80002ce <GPIO_Pin_Write_logic+0x8a>
		{
			logic_temp <<= (config->pin);
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	795b      	ldrb	r3, [r3, #5]
 80002a4:	461a      	mov	r2, r3
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	4093      	lsls	r3, r2
 80002aa:	60bb      	str	r3, [r7, #8]
			GPIO[config->port]->BSRR |= logic_temp;
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	791b      	ldrb	r3, [r3, #4]
 80002b0:	461a      	mov	r2, r3
 80002b2:	4b0b      	ldr	r3, [pc, #44]	; (80002e0 <GPIO_Pin_Write_logic+0x9c>)
 80002b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80002b8:	6919      	ldr	r1, [r3, #16]
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	791b      	ldrb	r3, [r3, #4]
 80002be:	461a      	mov	r2, r3
 80002c0:	4b07      	ldr	r3, [pc, #28]	; (80002e0 <GPIO_Pin_Write_logic+0x9c>)
 80002c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80002c6:	68ba      	ldr	r2, [r7, #8]
 80002c8:	430a      	orrs	r2, r1
 80002ca:	611a      	str	r2, [r3, #16]
 80002cc:	e001      	b.n	80002d2 <GPIO_Pin_Write_logic+0x8e>
		}
		else
		{
			RET = NOT_OK;
 80002ce:	2301      	movs	r3, #1
 80002d0:	73fb      	strb	r3, [r7, #15]
		}
	}
	return RET;
 80002d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80002d4:	4618      	mov	r0, r3
 80002d6:	3714      	adds	r7, #20
 80002d8:	46bd      	mov	sp, r7
 80002da:	bc80      	pop	{r7}
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	20000000 	.word	0x20000000

080002e4 <main>:
		.pin = 1,
		.port = PORTB
};

int main(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
	uint_32 data = PORTA_BASE->ODR;
 80002ea:	4b10      	ldr	r3, [pc, #64]	; (800032c <main+0x48>)
 80002ec:	68db      	ldr	r3, [r3, #12]
 80002ee:	607b      	str	r3, [r7, #4]
	data += 2;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	3302      	adds	r3, #2
 80002f4:	607b      	str	r3, [r7, #4]
	PORTA_BASE->ODR = data;
 80002f6:	4a0d      	ldr	r2, [pc, #52]	; (800032c <main+0x48>)
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	60d3      	str	r3, [r2, #12]
	RET = GPIO_Pin_Direction_Initialize(&config);
 80002fc:	480c      	ldr	r0, [pc, #48]	; (8000330 <main+0x4c>)
 80002fe:	f7ff ff37 	bl	8000170 <GPIO_Pin_Direction_Initialize>
 8000302:	4603      	mov	r3, r0
 8000304:	461a      	mov	r2, r3
 8000306:	4b0b      	ldr	r3, [pc, #44]	; (8000334 <main+0x50>)
 8000308:	701a      	strb	r2, [r3, #0]


	while(1)
	{
		RET = GPIO_Pin_Write_logic(&config,GPIO_HIGH);
 800030a:	2101      	movs	r1, #1
 800030c:	4808      	ldr	r0, [pc, #32]	; (8000330 <main+0x4c>)
 800030e:	f7ff ff99 	bl	8000244 <GPIO_Pin_Write_logic>
 8000312:	4603      	mov	r3, r0
 8000314:	461a      	mov	r2, r3
 8000316:	4b07      	ldr	r3, [pc, #28]	; (8000334 <main+0x50>)
 8000318:	701a      	strb	r2, [r3, #0]

		RET = GPIO_Pin_Write_logic(&config,GPIO_LOW);
 800031a:	2100      	movs	r1, #0
 800031c:	4804      	ldr	r0, [pc, #16]	; (8000330 <main+0x4c>)
 800031e:	f7ff ff91 	bl	8000244 <GPIO_Pin_Write_logic>
 8000322:	4603      	mov	r3, r0
 8000324:	461a      	mov	r2, r3
 8000326:	4b03      	ldr	r3, [pc, #12]	; (8000334 <main+0x50>)
 8000328:	701a      	strb	r2, [r3, #0]
		RET = GPIO_Pin_Write_logic(&config,GPIO_HIGH);
 800032a:	e7ee      	b.n	800030a <main+0x26>
 800032c:	40010800 	.word	0x40010800
 8000330:	2000001c 	.word	0x2000001c
 8000334:	20000040 	.word	0x20000040

08000338 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000338:	480d      	ldr	r0, [pc, #52]	; (8000370 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800033a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800033c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000340:	480c      	ldr	r0, [pc, #48]	; (8000374 <LoopForever+0x6>)
  ldr r1, =_edata
 8000342:	490d      	ldr	r1, [pc, #52]	; (8000378 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000344:	4a0d      	ldr	r2, [pc, #52]	; (800037c <LoopForever+0xe>)
  movs r3, #0
 8000346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000348:	e002      	b.n	8000350 <LoopCopyDataInit>

0800034a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800034a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800034c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800034e:	3304      	adds	r3, #4

08000350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000354:	d3f9      	bcc.n	800034a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000356:	4a0a      	ldr	r2, [pc, #40]	; (8000380 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000358:	4c0a      	ldr	r4, [pc, #40]	; (8000384 <LoopForever+0x16>)
  movs r3, #0
 800035a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800035c:	e001      	b.n	8000362 <LoopFillZerobss>

0800035e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800035e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000360:	3204      	adds	r2, #4

08000362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000364:	d3fb      	bcc.n	800035e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000366:	f000 f811 	bl	800038c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800036a:	f7ff ffbb 	bl	80002e4 <main>

0800036e <LoopForever>:

LoopForever:
  b LoopForever
 800036e:	e7fe      	b.n	800036e <LoopForever>
  ldr   r0, =_estack
 8000370:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000374:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000378:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 800037c:	080003f4 	.word	0x080003f4
  ldr r2, =_sbss
 8000380:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000384:	20000044 	.word	0x20000044

08000388 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000388:	e7fe      	b.n	8000388 <ADC1_2_IRQHandler>
	...

0800038c <__libc_init_array>:
 800038c:	b570      	push	{r4, r5, r6, lr}
 800038e:	2600      	movs	r6, #0
 8000390:	4d0c      	ldr	r5, [pc, #48]	; (80003c4 <__libc_init_array+0x38>)
 8000392:	4c0d      	ldr	r4, [pc, #52]	; (80003c8 <__libc_init_array+0x3c>)
 8000394:	1b64      	subs	r4, r4, r5
 8000396:	10a4      	asrs	r4, r4, #2
 8000398:	42a6      	cmp	r6, r4
 800039a:	d109      	bne.n	80003b0 <__libc_init_array+0x24>
 800039c:	f000 f81a 	bl	80003d4 <_init>
 80003a0:	2600      	movs	r6, #0
 80003a2:	4d0a      	ldr	r5, [pc, #40]	; (80003cc <__libc_init_array+0x40>)
 80003a4:	4c0a      	ldr	r4, [pc, #40]	; (80003d0 <__libc_init_array+0x44>)
 80003a6:	1b64      	subs	r4, r4, r5
 80003a8:	10a4      	asrs	r4, r4, #2
 80003aa:	42a6      	cmp	r6, r4
 80003ac:	d105      	bne.n	80003ba <__libc_init_array+0x2e>
 80003ae:	bd70      	pop	{r4, r5, r6, pc}
 80003b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003b4:	4798      	blx	r3
 80003b6:	3601      	adds	r6, #1
 80003b8:	e7ee      	b.n	8000398 <__libc_init_array+0xc>
 80003ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80003be:	4798      	blx	r3
 80003c0:	3601      	adds	r6, #1
 80003c2:	e7f2      	b.n	80003aa <__libc_init_array+0x1e>
 80003c4:	080003ec 	.word	0x080003ec
 80003c8:	080003ec 	.word	0x080003ec
 80003cc:	080003ec 	.word	0x080003ec
 80003d0:	080003f0 	.word	0x080003f0

080003d4 <_init>:
 80003d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003d6:	bf00      	nop
 80003d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003da:	bc08      	pop	{r3}
 80003dc:	469e      	mov	lr, r3
 80003de:	4770      	bx	lr

080003e0 <_fini>:
 80003e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003e2:	bf00      	nop
 80003e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003e6:	bc08      	pop	{r3}
 80003e8:	469e      	mov	lr, r3
 80003ea:	4770      	bx	lr
