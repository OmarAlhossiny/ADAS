
ADAS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004ec  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800061c  0800061c  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800061c  0800061c  00020048  2**0
                  CONTENTS
  4 .ARM          00000000  0800061c  0800061c  00020048  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800061c  0800061c  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800061c  0800061c  0001061c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000620  08000620  00010620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  08000624  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000048  0800066c  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  0800066c  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020071  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000aac  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000450  00000000  00000000  00020b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000a8  00000000  00000000  00020fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000006e  00000000  00000000  00021058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001290  00000000  00000000  000210c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000014ad  00000000  00000000  00022356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000b7ad  00000000  00000000  00023803  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000164  00000000  00000000  0002efb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  0002f114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000048 	.word	0x20000048
 800014c:	00000000 	.word	0x00000000
 8000150:	08000604 	.word	0x08000604

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000004c 	.word	0x2000004c
 800016c:	08000604 	.word	0x08000604

08000170 <GPIO_Pin_Direction_Initialize>:
 * /param[in] config pointer to GPIO pin configuration
 * /return    HAL_OK       ->   GPIO pin successfully Initialized
 *            HAL_NOT_OK   ->   GPIO pin Initialization failed
 */
Std_Return_t GPIO_Pin_Direction_Initialize(const GPIO_Config* config)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b086      	sub	sp, #24
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	Std_Return_t RET = HAL_OK;
 8000178:	2300      	movs	r3, #0
 800017a:	75fb      	strb	r3, [r7, #23]
	uint_32 mode_temp;
	uint_32 mask = 0x0000000FUL;
 800017c:	230f      	movs	r3, #15
 800017e:	613b      	str	r3, [r7, #16]
	if(config == NULL)
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	2b00      	cmp	r3, #0
 8000184:	d102      	bne.n	800018c <GPIO_Pin_Direction_Initialize+0x1c>
	{
		RET = HAL_NOT_OK;
 8000186:	2301      	movs	r3, #1
 8000188:	75fb      	strb	r3, [r7, #23]
 800018a:	e074      	b.n	8000276 <GPIO_Pin_Direction_Initialize+0x106>
	}
	else
	{
		RCC_APB2_GPIO_CLOCK_ENABLE(config->port);
 800018c:	4b3c      	ldr	r3, [pc, #240]	; (8000280 <GPIO_Pin_Direction_Initialize+0x110>)
 800018e:	699b      	ldr	r3, [r3, #24]
 8000190:	4619      	mov	r1, r3
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	791b      	ldrb	r3, [r3, #4]
 8000196:	3302      	adds	r3, #2
 8000198:	2201      	movs	r2, #1
 800019a:	fa02 f303 	lsl.w	r3, r2, r3
 800019e:	ea41 0203 	orr.w	r2, r1, r3
 80001a2:	4b37      	ldr	r3, [pc, #220]	; (8000280 <GPIO_Pin_Direction_Initialize+0x110>)
 80001a4:	619a      	str	r2, [r3, #24]
		mode_temp = config->mode;
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	60fb      	str	r3, [r7, #12]
		mode_temp <<= ((config->pin % 8) * 4);
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	795b      	ldrb	r3, [r3, #5]
 80001b0:	f003 0307 	and.w	r3, r3, #7
 80001b4:	009b      	lsls	r3, r3, #2
 80001b6:	68fa      	ldr	r2, [r7, #12]
 80001b8:	fa02 f303 	lsl.w	r3, r2, r3
 80001bc:	60fb      	str	r3, [r7, #12]
		mask = (mask << ((config->pin % 8) * 4));
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	795b      	ldrb	r3, [r3, #5]
 80001c2:	f003 0307 	and.w	r3, r3, #7
 80001c6:	009b      	lsls	r3, r3, #2
 80001c8:	693a      	ldr	r2, [r7, #16]
 80001ca:	fa02 f303 	lsl.w	r3, r2, r3
 80001ce:	613b      	str	r3, [r7, #16]
		MODIFY_REG(GPIO[config->port]->CR[config->pin / 8],mask,mode_temp);
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	791b      	ldrb	r3, [r3, #4]
 80001d4:	461a      	mov	r2, r3
 80001d6:	4b2b      	ldr	r3, [pc, #172]	; (8000284 <GPIO_Pin_Direction_Initialize+0x114>)
 80001d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80001dc:	687a      	ldr	r2, [r7, #4]
 80001de:	7952      	ldrb	r2, [r2, #5]
 80001e0:	08d2      	lsrs	r2, r2, #3
 80001e2:	b2d2      	uxtb	r2, r2
 80001e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80001e8:	693b      	ldr	r3, [r7, #16]
 80001ea:	43db      	mvns	r3, r3
 80001ec:	ea02 0103 	and.w	r1, r2, r3
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	791b      	ldrb	r3, [r3, #4]
 80001f4:	461a      	mov	r2, r3
 80001f6:	4b23      	ldr	r3, [pc, #140]	; (8000284 <GPIO_Pin_Direction_Initialize+0x114>)
 80001f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80001fc:	687a      	ldr	r2, [r7, #4]
 80001fe:	7952      	ldrb	r2, [r2, #5]
 8000200:	08d2      	lsrs	r2, r2, #3
 8000202:	b2d2      	uxtb	r2, r2
 8000204:	4610      	mov	r0, r2
 8000206:	68fa      	ldr	r2, [r7, #12]
 8000208:	430a      	orrs	r2, r1
 800020a:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
		if(config->mode == GPIO_MODE_INPUT_PULL_UP_DOWN)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	2b08      	cmp	r3, #8
 8000214:	d117      	bne.n	8000246 <GPIO_Pin_Direction_Initialize+0xd6>
		{
			if(config->state == PULL_DOWN)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	79db      	ldrb	r3, [r3, #7]
 800021a:	2b00      	cmp	r3, #0
 800021c:	d106      	bne.n	800022c <GPIO_Pin_Direction_Initialize+0xbc>
			{
				RET = GPIO_Pin_Write_logic(config,GPIO_LOW);
 800021e:	2100      	movs	r1, #0
 8000220:	6878      	ldr	r0, [r7, #4]
 8000222:	f000 f831 	bl	8000288 <GPIO_Pin_Write_logic>
 8000226:	4603      	mov	r3, r0
 8000228:	75fb      	strb	r3, [r7, #23]
 800022a:	e00c      	b.n	8000246 <GPIO_Pin_Direction_Initialize+0xd6>
			}
			else if(config->state == PULL_UP)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	79db      	ldrb	r3, [r3, #7]
 8000230:	2b01      	cmp	r3, #1
 8000232:	d106      	bne.n	8000242 <GPIO_Pin_Direction_Initialize+0xd2>
			{
				RET = GPIO_Pin_Write_logic(config,GPIO_HIGH);
 8000234:	2101      	movs	r1, #1
 8000236:	6878      	ldr	r0, [r7, #4]
 8000238:	f000 f826 	bl	8000288 <GPIO_Pin_Write_logic>
 800023c:	4603      	mov	r3, r0
 800023e:	75fb      	strb	r3, [r7, #23]
 8000240:	e001      	b.n	8000246 <GPIO_Pin_Direction_Initialize+0xd6>
			}
			else
			{
				RET = HAL_NOT_OK;
 8000242:	2301      	movs	r3, #1
 8000244:	75fb      	strb	r3, [r7, #23]
			}
		}
		if(config->logic == GPIO_LOW)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	799b      	ldrb	r3, [r3, #6]
 800024a:	2b00      	cmp	r3, #0
 800024c:	d106      	bne.n	800025c <GPIO_Pin_Direction_Initialize+0xec>
		{
			RET = GPIO_Pin_Write_logic(config,GPIO_LOW);
 800024e:	2100      	movs	r1, #0
 8000250:	6878      	ldr	r0, [r7, #4]
 8000252:	f000 f819 	bl	8000288 <GPIO_Pin_Write_logic>
 8000256:	4603      	mov	r3, r0
 8000258:	75fb      	strb	r3, [r7, #23]
 800025a:	e00c      	b.n	8000276 <GPIO_Pin_Direction_Initialize+0x106>
		}
		else if(config->logic == GPIO_HIGH)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	799b      	ldrb	r3, [r3, #6]
 8000260:	2b01      	cmp	r3, #1
 8000262:	d106      	bne.n	8000272 <GPIO_Pin_Direction_Initialize+0x102>
		{
			RET = GPIO_Pin_Write_logic(config,GPIO_HIGH);
 8000264:	2101      	movs	r1, #1
 8000266:	6878      	ldr	r0, [r7, #4]
 8000268:	f000 f80e 	bl	8000288 <GPIO_Pin_Write_logic>
 800026c:	4603      	mov	r3, r0
 800026e:	75fb      	strb	r3, [r7, #23]
 8000270:	e001      	b.n	8000276 <GPIO_Pin_Direction_Initialize+0x106>
		}
		else
		{
			RET = HAL_NOT_OK;
 8000272:	2301      	movs	r3, #1
 8000274:	75fb      	strb	r3, [r7, #23]
		}

	}
	return RET;
 8000276:	7dfb      	ldrb	r3, [r7, #23]
}
 8000278:	4618      	mov	r0, r3
 800027a:	3718      	adds	r7, #24
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	40021000 	.word	0x40021000
 8000284:	20000000 	.word	0x20000000

08000288 <GPIO_Pin_Write_logic>:
 * /param[in] logic variable to store the desired logic
 * /return    HAL_OK       ->   GPIO pin successfully Initialized
 *            HAL_NOT_OK   ->   GPIO pin Initialization failed
 */
Std_Return_t GPIO_Pin_Write_logic(const GPIO_Config* config,PIN_LOGIC logic)
{
 8000288:	b480      	push	{r7}
 800028a:	b085      	sub	sp, #20
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
 8000290:	460b      	mov	r3, r1
 8000292:	70fb      	strb	r3, [r7, #3]
	Std_Return_t RET = HAL_OK;
 8000294:	2300      	movs	r3, #0
 8000296:	73fb      	strb	r3, [r7, #15]
	uint_32 logic_temp = 0x00000001UL;
 8000298:	2301      	movs	r3, #1
 800029a:	60bb      	str	r3, [r7, #8]
	if(config == NULL)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d102      	bne.n	80002a8 <GPIO_Pin_Write_logic+0x20>
	{
		RET = HAL_NOT_OK;
 80002a2:	2301      	movs	r3, #1
 80002a4:	73fb      	strb	r3, [r7, #15]
 80002a6:	e036      	b.n	8000316 <GPIO_Pin_Write_logic+0x8e>
	}
	else
	{
		if(logic == GPIO_LOW)
 80002a8:	78fb      	ldrb	r3, [r7, #3]
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d117      	bne.n	80002de <GPIO_Pin_Write_logic+0x56>
		{
			logic_temp <<= (16 + config->pin);
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	795b      	ldrb	r3, [r3, #5]
 80002b2:	3310      	adds	r3, #16
 80002b4:	68ba      	ldr	r2, [r7, #8]
 80002b6:	fa02 f303 	lsl.w	r3, r2, r3
 80002ba:	60bb      	str	r3, [r7, #8]
			GPIO[config->port]->BSRR |= logic_temp;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	791b      	ldrb	r3, [r3, #4]
 80002c0:	461a      	mov	r2, r3
 80002c2:	4b18      	ldr	r3, [pc, #96]	; (8000324 <GPIO_Pin_Write_logic+0x9c>)
 80002c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80002c8:	6919      	ldr	r1, [r3, #16]
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	791b      	ldrb	r3, [r3, #4]
 80002ce:	461a      	mov	r2, r3
 80002d0:	4b14      	ldr	r3, [pc, #80]	; (8000324 <GPIO_Pin_Write_logic+0x9c>)
 80002d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80002d6:	68ba      	ldr	r2, [r7, #8]
 80002d8:	430a      	orrs	r2, r1
 80002da:	611a      	str	r2, [r3, #16]
 80002dc:	e01b      	b.n	8000316 <GPIO_Pin_Write_logic+0x8e>
		}
		else if(logic == GPIO_HIGH)
 80002de:	78fb      	ldrb	r3, [r7, #3]
 80002e0:	2b01      	cmp	r3, #1
 80002e2:	d116      	bne.n	8000312 <GPIO_Pin_Write_logic+0x8a>
		{
			logic_temp <<= (config->pin);
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	795b      	ldrb	r3, [r3, #5]
 80002e8:	461a      	mov	r2, r3
 80002ea:	68bb      	ldr	r3, [r7, #8]
 80002ec:	4093      	lsls	r3, r2
 80002ee:	60bb      	str	r3, [r7, #8]
			GPIO[config->port]->BSRR |= logic_temp;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	791b      	ldrb	r3, [r3, #4]
 80002f4:	461a      	mov	r2, r3
 80002f6:	4b0b      	ldr	r3, [pc, #44]	; (8000324 <GPIO_Pin_Write_logic+0x9c>)
 80002f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80002fc:	6919      	ldr	r1, [r3, #16]
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	791b      	ldrb	r3, [r3, #4]
 8000302:	461a      	mov	r2, r3
 8000304:	4b07      	ldr	r3, [pc, #28]	; (8000324 <GPIO_Pin_Write_logic+0x9c>)
 8000306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800030a:	68ba      	ldr	r2, [r7, #8]
 800030c:	430a      	orrs	r2, r1
 800030e:	611a      	str	r2, [r3, #16]
 8000310:	e001      	b.n	8000316 <GPIO_Pin_Write_logic+0x8e>
		}
		else
		{
			RET = HAL_NOT_OK;
 8000312:	2301      	movs	r3, #1
 8000314:	73fb      	strb	r3, [r7, #15]
		}
	}
	return RET;
 8000316:	7bfb      	ldrb	r3, [r7, #15]
}
 8000318:	4618      	mov	r0, r3
 800031a:	3714      	adds	r7, #20
 800031c:	46bd      	mov	sp, r7
 800031e:	bc80      	pop	{r7}
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	20000000 	.word	0x20000000

08000328 <RCC_SysClock_Init>:
 * /param[in] config pointer to system clock configuration
 * /return    HAL_OK       ->   System clock successfully Initialized
 *            HAL_NOT_OK   ->   System clock Initialization failed
 */
Std_Return_t RCC_SysClock_Init(RCC_CFGR* config)
{
 8000328:	b480      	push	{r7}
 800032a:	b085      	sub	sp, #20
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
	Std_Return_t RET = HAL_OK;
 8000330:	2300      	movs	r3, #0
 8000332:	73fb      	strb	r3, [r7, #15]
	if(NULL == config)
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	2b00      	cmp	r3, #0
 8000338:	d102      	bne.n	8000340 <RCC_SysClock_Init+0x18>
	{
		RET = HAL_NOT_OK;
 800033a:	2301      	movs	r3, #1
 800033c:	73fb      	strb	r3, [r7, #15]
 800033e:	e0c6      	b.n	80004ce <RCC_SysClock_Init+0x1a6>
	}
	else
	{
		MODIFY_REG(RCC->CFGR,RCC_ADC_PRESCALER_MASK,config->ADCPRE);
 8000340:	4b66      	ldr	r3, [pc, #408]	; (80004dc <RCC_SysClock_Init+0x1b4>)
 8000342:	685b      	ldr	r3, [r3, #4]
 8000344:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000348:	687a      	ldr	r2, [r7, #4]
 800034a:	6912      	ldr	r2, [r2, #16]
 800034c:	431a      	orrs	r2, r3
 800034e:	4b63      	ldr	r3, [pc, #396]	; (80004dc <RCC_SysClock_Init+0x1b4>)
 8000350:	605a      	str	r2, [r3, #4]
		MODIFY_REG(RCC->CFGR,RCC_AHB_PRESCALER_MASK,config->HPRE);
 8000352:	4b62      	ldr	r3, [pc, #392]	; (80004dc <RCC_SysClock_Init+0x1b4>)
 8000354:	685b      	ldr	r3, [r3, #4]
 8000356:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800035a:	687a      	ldr	r2, [r7, #4]
 800035c:	6852      	ldr	r2, [r2, #4]
 800035e:	431a      	orrs	r2, r3
 8000360:	4b5e      	ldr	r3, [pc, #376]	; (80004dc <RCC_SysClock_Init+0x1b4>)
 8000362:	605a      	str	r2, [r3, #4]
		MODIFY_REG(RCC->CFGR,RCC_MICROCONTROLLER_CLOCK_OUT_MASK,config->MCO);
 8000364:	4b5d      	ldr	r3, [pc, #372]	; (80004dc <RCC_SysClock_Init+0x1b4>)
 8000366:	685b      	ldr	r3, [r3, #4]
 8000368:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800036c:	687a      	ldr	r2, [r7, #4]
 800036e:	6a12      	ldr	r2, [r2, #32]
 8000370:	431a      	orrs	r2, r3
 8000372:	4b5a      	ldr	r3, [pc, #360]	; (80004dc <RCC_SysClock_Init+0x1b4>)
 8000374:	605a      	str	r2, [r3, #4]
		MODIFY_REG(RCC->CFGR,RCC_PLL_MUL_MASK,config->PLLMUL);
 8000376:	4b59      	ldr	r3, [pc, #356]	; (80004dc <RCC_SysClock_Init+0x1b4>)
 8000378:	685b      	ldr	r3, [r3, #4]
 800037a:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 800037e:	687a      	ldr	r2, [r7, #4]
 8000380:	69d2      	ldr	r2, [r2, #28]
 8000382:	431a      	orrs	r2, r3
 8000384:	4b55      	ldr	r3, [pc, #340]	; (80004dc <RCC_SysClock_Init+0x1b4>)
 8000386:	605a      	str	r2, [r3, #4]
		MODIFY_REG(RCC->CFGR,RCC_APB_LOW_SPEED_PRESCALER_APB1_MASK,config->PPRE1);
 8000388:	4b54      	ldr	r3, [pc, #336]	; (80004dc <RCC_SysClock_Init+0x1b4>)
 800038a:	685b      	ldr	r3, [r3, #4]
 800038c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000390:	687a      	ldr	r2, [r7, #4]
 8000392:	6892      	ldr	r2, [r2, #8]
 8000394:	431a      	orrs	r2, r3
 8000396:	4b51      	ldr	r3, [pc, #324]	; (80004dc <RCC_SysClock_Init+0x1b4>)
 8000398:	605a      	str	r2, [r3, #4]
		MODIFY_REG(RCC->CFGR,RCC_APB_HIGH_SPEED_PRESCALER_APB2_MASK,config->PPRE2);
 800039a:	4b50      	ldr	r3, [pc, #320]	; (80004dc <RCC_SysClock_Init+0x1b4>)
 800039c:	685b      	ldr	r3, [r3, #4]
 800039e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80003a2:	687a      	ldr	r2, [r7, #4]
 80003a4:	68d2      	ldr	r2, [r2, #12]
 80003a6:	431a      	orrs	r2, r3
 80003a8:	4b4c      	ldr	r3, [pc, #304]	; (80004dc <RCC_SysClock_Init+0x1b4>)
 80003aa:	605a      	str	r2, [r3, #4]
		if(config->PLLXTPRE == RCC_HSE_NOT_DIVIDED)
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d106      	bne.n	80003c2 <RCC_SysClock_Init+0x9a>
		{
			RCC_HSE_CLOCK_NOT_DIVIDED();
 80003b4:	4b49      	ldr	r3, [pc, #292]	; (80004dc <RCC_SysClock_Init+0x1b4>)
 80003b6:	685b      	ldr	r3, [r3, #4]
 80003b8:	4a48      	ldr	r2, [pc, #288]	; (80004dc <RCC_SysClock_Init+0x1b4>)
 80003ba:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80003be:	6053      	str	r3, [r2, #4]
 80003c0:	e00c      	b.n	80003dc <RCC_SysClock_Init+0xb4>
		}
		else if(config->PLLXTPRE == RCC_HSE_DIVIDED_BY2)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	699b      	ldr	r3, [r3, #24]
 80003c6:	2b01      	cmp	r3, #1
 80003c8:	d106      	bne.n	80003d8 <RCC_SysClock_Init+0xb0>
		{
			RCC_HSE_CLOCK_DIVIDED_BY2();
 80003ca:	4b44      	ldr	r3, [pc, #272]	; (80004dc <RCC_SysClock_Init+0x1b4>)
 80003cc:	685b      	ldr	r3, [r3, #4]
 80003ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80003d2:	4b42      	ldr	r3, [pc, #264]	; (80004dc <RCC_SysClock_Init+0x1b4>)
 80003d4:	605a      	str	r2, [r3, #4]
 80003d6:	e001      	b.n	80003dc <RCC_SysClock_Init+0xb4>
		}
		else
		{
			RET = HAL_NOT_OK;
 80003d8:	2301      	movs	r3, #1
 80003da:	73fb      	strb	r3, [r7, #15]
		}

		if(config->PLLSRC == RCC_PLL_SOURCE_HSI)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	695b      	ldr	r3, [r3, #20]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d113      	bne.n	800040c <RCC_SysClock_Init+0xe4>
		{
			RCC_HSI_CLOCK_ENABLE();
 80003e4:	4b3d      	ldr	r3, [pc, #244]	; (80004dc <RCC_SysClock_Init+0x1b4>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	f043 0201 	orr.w	r2, r3, #1
 80003ec:	4b3b      	ldr	r3, [pc, #236]	; (80004dc <RCC_SysClock_Init+0x1b4>)
 80003ee:	601a      	str	r2, [r3, #0]
			while(RCC_HSI_READ_READY_FLAG() == RCC_HSI_READY_FLAG_CLEAR)
 80003f0:	bf00      	nop
 80003f2:	4b3a      	ldr	r3, [pc, #232]	; (80004dc <RCC_SysClock_Init+0x1b4>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	f003 0302 	and.w	r3, r3, #2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d0f9      	beq.n	80003f2 <RCC_SysClock_Init+0xca>
			{

			}
			RCC_PLL_ENTRY_SOURCE_HSI();
 80003fe:	4b37      	ldr	r3, [pc, #220]	; (80004dc <RCC_SysClock_Init+0x1b4>)
 8000400:	685b      	ldr	r3, [r3, #4]
 8000402:	4a36      	ldr	r2, [pc, #216]	; (80004dc <RCC_SysClock_Init+0x1b4>)
 8000404:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000408:	6053      	str	r3, [r2, #4]
 800040a:	e01f      	b.n	800044c <RCC_SysClock_Init+0x124>

		}
		else if(config->PLLSRC == RCC_PLL_SOURCE_HSE)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	695b      	ldr	r3, [r3, #20]
 8000410:	2b01      	cmp	r3, #1
 8000412:	d119      	bne.n	8000448 <RCC_SysClock_Init+0x120>
		{
			RCC_HSE_CLOCK_BYPASS();
 8000414:	4b31      	ldr	r3, [pc, #196]	; (80004dc <RCC_SysClock_Init+0x1b4>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800041c:	4b2f      	ldr	r3, [pc, #188]	; (80004dc <RCC_SysClock_Init+0x1b4>)
 800041e:	601a      	str	r2, [r3, #0]
			RCC_HSE_CLOCK_ENABLE();
 8000420:	4b2e      	ldr	r3, [pc, #184]	; (80004dc <RCC_SysClock_Init+0x1b4>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000428:	4b2c      	ldr	r3, [pc, #176]	; (80004dc <RCC_SysClock_Init+0x1b4>)
 800042a:	601a      	str	r2, [r3, #0]
			while(RCC_HSE_READ_READY_FLAG() == RCC_HSE_READY_FLAG_CLEAR)
 800042c:	bf00      	nop
 800042e:	4b2b      	ldr	r3, [pc, #172]	; (80004dc <RCC_SysClock_Init+0x1b4>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000436:	2b00      	cmp	r3, #0
 8000438:	d0f9      	beq.n	800042e <RCC_SysClock_Init+0x106>
			{

			}
			RCC_PLL_ENTRY_SOURCE_HSE();
 800043a:	4b28      	ldr	r3, [pc, #160]	; (80004dc <RCC_SysClock_Init+0x1b4>)
 800043c:	685b      	ldr	r3, [r3, #4]
 800043e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000442:	4b26      	ldr	r3, [pc, #152]	; (80004dc <RCC_SysClock_Init+0x1b4>)
 8000444:	605a      	str	r2, [r3, #4]
 8000446:	e001      	b.n	800044c <RCC_SysClock_Init+0x124>
		}
		else
		{
			RET = HAL_NOT_OK;
 8000448:	2301      	movs	r3, #1
 800044a:	73fb      	strb	r3, [r7, #15]
		}

		if(config->SW == RCC_SYSTEM_CLOCK_SWITCH_HSI)
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d10d      	bne.n	8000470 <RCC_SysClock_Init+0x148>
		{
			RCC_HSI_CLOCK_ENABLE();
 8000454:	4b21      	ldr	r3, [pc, #132]	; (80004dc <RCC_SysClock_Init+0x1b4>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	f043 0201 	orr.w	r2, r3, #1
 800045c:	4b1f      	ldr	r3, [pc, #124]	; (80004dc <RCC_SysClock_Init+0x1b4>)
 800045e:	601a      	str	r2, [r3, #0]
			while(RCC_HSI_READ_READY_FLAG() == RCC_HSI_READY_FLAG_CLEAR)
 8000460:	bf00      	nop
 8000462:	4b1e      	ldr	r3, [pc, #120]	; (80004dc <RCC_SysClock_Init+0x1b4>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	f003 0302 	and.w	r3, r3, #2
 800046a:	2b00      	cmp	r3, #0
 800046c:	d0f9      	beq.n	8000462 <RCC_SysClock_Init+0x13a>
 800046e:	e025      	b.n	80004bc <RCC_SysClock_Init+0x194>
			{

			}
		}
		else if(config->SW == RCC_SYSTEM_CLOCK_SWITCH_HSE)
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	2b01      	cmp	r3, #1
 8000476:	d10d      	bne.n	8000494 <RCC_SysClock_Init+0x16c>
		{
			RCC_HSE_CLOCK_ENABLE();
 8000478:	4b18      	ldr	r3, [pc, #96]	; (80004dc <RCC_SysClock_Init+0x1b4>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000480:	4b16      	ldr	r3, [pc, #88]	; (80004dc <RCC_SysClock_Init+0x1b4>)
 8000482:	601a      	str	r2, [r3, #0]
			while(RCC_HSE_READ_READY_FLAG() == RCC_HSE_READY_FLAG_CLEAR)
 8000484:	bf00      	nop
 8000486:	4b15      	ldr	r3, [pc, #84]	; (80004dc <RCC_SysClock_Init+0x1b4>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800048e:	2b00      	cmp	r3, #0
 8000490:	d0f9      	beq.n	8000486 <RCC_SysClock_Init+0x15e>
 8000492:	e013      	b.n	80004bc <RCC_SysClock_Init+0x194>
			{

			}
		}
		else if(config->SW == RCC_SYSTEM_CLOCK_SWITCH_PLL)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	2b02      	cmp	r3, #2
 800049a:	d10d      	bne.n	80004b8 <RCC_SysClock_Init+0x190>
		{
			RCC_PLL_CLOCK_ENABLE();
 800049c:	4b0f      	ldr	r3, [pc, #60]	; (80004dc <RCC_SysClock_Init+0x1b4>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80004a4:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <RCC_SysClock_Init+0x1b4>)
 80004a6:	601a      	str	r2, [r3, #0]
			while(RCC_PLL_READ_READY_FLAG() == RCC_PLL_READY_FLAG_CLEAR)
 80004a8:	bf00      	nop
 80004aa:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <RCC_SysClock_Init+0x1b4>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d0f9      	beq.n	80004aa <RCC_SysClock_Init+0x182>
 80004b6:	e001      	b.n	80004bc <RCC_SysClock_Init+0x194>

			}
		}
		else
		{
			RET = HAL_NOT_OK;
 80004b8:	2301      	movs	r3, #1
 80004ba:	73fb      	strb	r3, [r7, #15]
		}
		MODIFY_REG(RCC->CFGR,RCC_SYSTEM_CLOCK_SWITCH_MASK,config->SW);
 80004bc:	4b07      	ldr	r3, [pc, #28]	; (80004dc <RCC_SysClock_Init+0x1b4>)
 80004be:	685b      	ldr	r3, [r3, #4]
 80004c0:	f023 0303 	bic.w	r3, r3, #3
 80004c4:	687a      	ldr	r2, [r7, #4]
 80004c6:	6812      	ldr	r2, [r2, #0]
 80004c8:	431a      	orrs	r2, r3
 80004ca:	4b04      	ldr	r3, [pc, #16]	; (80004dc <RCC_SysClock_Init+0x1b4>)
 80004cc:	605a      	str	r2, [r3, #4]
	}
	return RET;
 80004ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80004d0:	4618      	mov	r0, r3
 80004d2:	3714      	adds	r7, #20
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bc80      	pop	{r7}
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	40021000 	.word	0x40021000

080004e0 <main>:
	.PLLMUL = RCC_PLL_MULTIPLICATION_FACTOR_15,
	.ADCPRE = RCC_ADC_PRESCALER_DIV6
};

int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b084      	sub	sp, #16
 80004e4:	af00      	add	r7, sp, #0
    RET = RCC_SysClock_Init(&config);
 80004e6:	481c      	ldr	r0, [pc, #112]	; (8000558 <main+0x78>)
 80004e8:	f7ff ff1e 	bl	8000328 <RCC_SysClock_Init>
 80004ec:	4603      	mov	r3, r0
 80004ee:	461a      	mov	r2, r3
 80004f0:	4b1a      	ldr	r3, [pc, #104]	; (800055c <main+0x7c>)
 80004f2:	701a      	strb	r2, [r3, #0]
	RET = GPIO_Pin_Direction_Initialize(&Config);
 80004f4:	481a      	ldr	r0, [pc, #104]	; (8000560 <main+0x80>)
 80004f6:	f7ff fe3b 	bl	8000170 <GPIO_Pin_Direction_Initialize>
 80004fa:	4603      	mov	r3, r0
 80004fc:	461a      	mov	r2, r3
 80004fe:	4b17      	ldr	r3, [pc, #92]	; (800055c <main+0x7c>)
 8000500:	701a      	strb	r2, [r3, #0]



	while(1)
	{
		RET = GPIO_Pin_Write_logic(&Config,GPIO_HIGH);
 8000502:	2101      	movs	r1, #1
 8000504:	4816      	ldr	r0, [pc, #88]	; (8000560 <main+0x80>)
 8000506:	f7ff febf 	bl	8000288 <GPIO_Pin_Write_logic>
 800050a:	4603      	mov	r3, r0
 800050c:	461a      	mov	r2, r3
 800050e:	4b13      	ldr	r3, [pc, #76]	; (800055c <main+0x7c>)
 8000510:	701a      	strb	r2, [r3, #0]
		delay(100);
 8000512:	4b14      	ldr	r3, [pc, #80]	; (8000564 <main+0x84>)
 8000514:	607b      	str	r3, [r7, #4]
 8000516:	2300      	movs	r3, #0
 8000518:	60fb      	str	r3, [r7, #12]
 800051a:	e003      	b.n	8000524 <main+0x44>
 800051c:	bf00      	nop
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	3301      	adds	r3, #1
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	68fa      	ldr	r2, [r7, #12]
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	429a      	cmp	r2, r3
 800052a:	dbf7      	blt.n	800051c <main+0x3c>
		RET = GPIO_Pin_Write_logic(&Config,GPIO_LOW);
 800052c:	2100      	movs	r1, #0
 800052e:	480c      	ldr	r0, [pc, #48]	; (8000560 <main+0x80>)
 8000530:	f7ff feaa 	bl	8000288 <GPIO_Pin_Write_logic>
 8000534:	4603      	mov	r3, r0
 8000536:	461a      	mov	r2, r3
 8000538:	4b08      	ldr	r3, [pc, #32]	; (800055c <main+0x7c>)
 800053a:	701a      	strb	r2, [r3, #0]
		delay(100);
 800053c:	4b09      	ldr	r3, [pc, #36]	; (8000564 <main+0x84>)
 800053e:	603b      	str	r3, [r7, #0]
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	e003      	b.n	800054e <main+0x6e>
 8000546:	bf00      	nop
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	3301      	adds	r3, #1
 800054c:	60bb      	str	r3, [r7, #8]
 800054e:	68ba      	ldr	r2, [r7, #8]
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	429a      	cmp	r2, r3
 8000554:	dbf7      	blt.n	8000546 <main+0x66>
		RET = GPIO_Pin_Write_logic(&Config,GPIO_HIGH);
 8000556:	e7d4      	b.n	8000502 <main+0x22>
 8000558:	20000024 	.word	0x20000024
 800055c:	20000064 	.word	0x20000064
 8000560:	2000001c 	.word	0x2000001c
 8000564:	00104668 	.word	0x00104668

08000568 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000568:	480d      	ldr	r0, [pc, #52]	; (80005a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800056a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800056c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000570:	480c      	ldr	r0, [pc, #48]	; (80005a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000572:	490d      	ldr	r1, [pc, #52]	; (80005a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000574:	4a0d      	ldr	r2, [pc, #52]	; (80005ac <LoopForever+0xe>)
  movs r3, #0
 8000576:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000578:	e002      	b.n	8000580 <LoopCopyDataInit>

0800057a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800057a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800057c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800057e:	3304      	adds	r3, #4

08000580 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000584:	d3f9      	bcc.n	800057a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000586:	4a0a      	ldr	r2, [pc, #40]	; (80005b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000588:	4c0a      	ldr	r4, [pc, #40]	; (80005b4 <LoopForever+0x16>)
  movs r3, #0
 800058a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800058c:	e001      	b.n	8000592 <LoopFillZerobss>

0800058e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800058e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000590:	3204      	adds	r2, #4

08000592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000594:	d3fb      	bcc.n	800058e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000596:	f000 f811 	bl	80005bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800059a:	f7ff ffa1 	bl	80004e0 <main>

0800059e <LoopForever>:

LoopForever:
  b LoopForever
 800059e:	e7fe      	b.n	800059e <LoopForever>
  ldr   r0, =_estack
 80005a0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80005a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005a8:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 80005ac:	08000624 	.word	0x08000624
  ldr r2, =_sbss
 80005b0:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 80005b4:	20000068 	.word	0x20000068

080005b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005b8:	e7fe      	b.n	80005b8 <ADC1_2_IRQHandler>
	...

080005bc <__libc_init_array>:
 80005bc:	b570      	push	{r4, r5, r6, lr}
 80005be:	2600      	movs	r6, #0
 80005c0:	4d0c      	ldr	r5, [pc, #48]	; (80005f4 <__libc_init_array+0x38>)
 80005c2:	4c0d      	ldr	r4, [pc, #52]	; (80005f8 <__libc_init_array+0x3c>)
 80005c4:	1b64      	subs	r4, r4, r5
 80005c6:	10a4      	asrs	r4, r4, #2
 80005c8:	42a6      	cmp	r6, r4
 80005ca:	d109      	bne.n	80005e0 <__libc_init_array+0x24>
 80005cc:	f000 f81a 	bl	8000604 <_init>
 80005d0:	2600      	movs	r6, #0
 80005d2:	4d0a      	ldr	r5, [pc, #40]	; (80005fc <__libc_init_array+0x40>)
 80005d4:	4c0a      	ldr	r4, [pc, #40]	; (8000600 <__libc_init_array+0x44>)
 80005d6:	1b64      	subs	r4, r4, r5
 80005d8:	10a4      	asrs	r4, r4, #2
 80005da:	42a6      	cmp	r6, r4
 80005dc:	d105      	bne.n	80005ea <__libc_init_array+0x2e>
 80005de:	bd70      	pop	{r4, r5, r6, pc}
 80005e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80005e4:	4798      	blx	r3
 80005e6:	3601      	adds	r6, #1
 80005e8:	e7ee      	b.n	80005c8 <__libc_init_array+0xc>
 80005ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80005ee:	4798      	blx	r3
 80005f0:	3601      	adds	r6, #1
 80005f2:	e7f2      	b.n	80005da <__libc_init_array+0x1e>
 80005f4:	0800061c 	.word	0x0800061c
 80005f8:	0800061c 	.word	0x0800061c
 80005fc:	0800061c 	.word	0x0800061c
 8000600:	08000620 	.word	0x08000620

08000604 <_init>:
 8000604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000606:	bf00      	nop
 8000608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800060a:	bc08      	pop	{r3}
 800060c:	469e      	mov	lr, r3
 800060e:	4770      	bx	lr

08000610 <_fini>:
 8000610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000612:	bf00      	nop
 8000614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000616:	bc08      	pop	{r3}
 8000618:	469e      	mov	lr, r3
 800061a:	4770      	bx	lr
